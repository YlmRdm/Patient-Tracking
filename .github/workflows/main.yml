name: Patient Tracking Platform CI/CD Pipeline

# Github actionsın hangi izinlere sahip olacağını belirtir
permissions:
  issues: write # issueları okuma ve yazma izni

# pipeline tetikleyecek olayları tanımlıyoruz
on:
  push:
    branches: [ master ] # main branche push yapıldıgında calisir

# tüm pipeline boyunca kullanılacak environment variablelar
env:
  REGISTRY: docker.io # dockerhub adresi
  BACKEND_IMAGE_NAME: patient-tracking-backend # backend image ismi
  FRONTEND_IMAGE_NAME: patient-tracking-frontend # frontend image ismi
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }} # github secretstan db adını alır
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }} # github secretstan db kullanıcı adini alır
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} # github secretstan db sifresi alır
  JWT_SECRET: ${{ secrets.JWT_SECRET }} # JWT token için secret key
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # dockerhub kullanıcı adı
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # dockerhub sifresi

jobs:
  # kod kalitesi kontrolü ve test
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    # repo çekilir
    - name: Checkout code
      uses: actions/checkout@v4
      
    # .net sdk kurulumu yapılır
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' # .NET 9 versiyonu
        
    # node.js kurulumu
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm' # npm paketlerini cacheler
        cache-dependency-path: AI-SupportedPatientTrackingPlatform.UI-main/package-lock.json
        
    # backend bagımlılıklarını yüklyoruz
    - name: Backend Dependencies
      working-directory: AI-SupportedPatientTrackingPlatform.Back-main/src/PatientTrackingPlatform.API
      run: dotnet restore
      
    # backend icin testleri calıştırıyoruz
    - name: Run Backend Tests
      working-directory: AI-SupportedPatientTrackingPlatform.Back-main
      run: dotnet test --no-restore --verbosity normal
      
    # frontend bagımlılıkları yüklenir
    - name: Install Frontend Dependencies
      working-directory: AI-SupportedPatientTrackingPlatform.UI-main
      run: npm ci
      
    #  ESLint eklenir
    - name: Add ESLint to Angular project
      working-directory: AI-SupportedPatientTrackingPlatform.UI-main
      run: npx ng add @angular-eslint/schematics --skip-confirmation
      
    # Frontend kod kalitesi kontrolü yapılır
    - name: Run Frontend Linting
      working-directory: AI-SupportedPatientTrackingPlatform.UI-main
      run: npm run lint
      
    # Frontend testlerini çalıştırır
    - name: Run Frontend Tests
      working-directory: AI-SupportedPatientTrackingPlatform.UI-main
      run: npm test -- --watch=false --browsers=ChromeHeadless

  # imageları oluşturur ve push eder
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: code-quality # önceki job başarılı olmalı
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # sadece main branche pushta çalışması icin
    
    steps:
    # repoyu çeker
    - name: Checkout code
      uses: actions/checkout@v4

    # dockerhuba giriş yapar
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    # backend imageını build et ve push et
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: . 
        file: ./backend.Dockerfile # dockerfile yolu
        push: true # imageı push et
        tags: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
      
    # Frontend imageını build et ve push et
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./frontend.Dockerfile # Dockerfile yolu
        push: true # imageı push et
        tags: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
        
    # Güvenlik taraması yapılır
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

  # Staging ortamına deploy
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push # önceki job başarılı olmalı
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # sadece main branche pushta çalışması icin
    steps:
      # ssh ile staging sunucusuna baglan ve deploy et
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /home/ubuntu/patient-tracking
            git pull
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ASPNETCORE_ENVIRONMENT=Staging" >> .env
            docker compose pull
            docker compose up -d --build

  # Production ortamına manuel approval ile deploy
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging # staging deployu başarılı olmalı
    steps:
      # manuel onay bekle
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
      # ssh ile production sunucusuna baglan ve deploy et.
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /home/ubuntu/patient-tracking
            git pull
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ASPNETCORE_ENVIRONMENT=Production" >> .env
            docker compose pull
            docker compose up -d --build
